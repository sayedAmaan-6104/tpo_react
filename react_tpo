import React, { useState, useEffect, useRef, createContext, useContext } from 'react';
import { Chart, registerables } from 'chart.js';

// --- Register Chart.js components ---
Chart.register(...registerables);

// --- TYPE DEFINITIONS ---
type UserRole = 'student' | 'recruiter' | 'admin' | null;
type Screen = 
    // General
    | 'welcome' 
    // Student
    | 'student_onboarding' | 'student_dashboard' | 'resume_optimizer' | 'mock_interview' | 'job_listings' | 'job_fair' | 'training_hub' | 'application_tracker' | 'student_profile'
    // Recruiter
    | 'recruiter_dashboard' | 'create_job' | 'candidate_review' | 'messaging' | 'manage_jobs' | 'company_profile'
    // Admin
    | 'admin_dashboard' | 'job_approval' | 'user_management' | 'content_management';

interface User {
    id: string;
    name: string;
    email: string;
    role: UserRole;
}

interface Job {
    id: string;
    title: string;
    company: string;
    description: string;
    matchPercentage?: number;
    status: 'pending' | 'approved' | 'rejected';
}

// --- MOCK DATA ---
const MOCK_JOBS: Job[] = [
    { id: '1', title: 'Frontend Developer', company: 'Tech Solutions Inc.', description: 'Developing and maintaining user-facing features using React.js.', matchPercentage: 92, status: 'approved' },
    { id: '2', title: 'Backend Engineer', company: 'Data Systems', description: 'Building server-side logic, database interactions and APIs.', matchPercentage: 85, status: 'approved' },
    { id: '3', title: 'UI/UX Designer', company: 'Creative Minds', description: 'Designing engaging and user-friendly interfaces for web and mobile.', matchPercentage: 78, status: 'approved' },
    { id: '4', title: 'Data Scientist', company: 'Analytics Corp.', description: 'Utilizing statistical methods and machine learning to analyze large datasets.', status: 'pending' },
    { id: '5', title: 'Product Manager', company: 'Innovate Co.', description: 'Defining product vision, strategy, and roadmap.', status: 'approved' }
];

const MOCK_STUDENTS = [
    { id: 's1', name: 'Alice Johnson', email: 'alice@edu.com' },
    { id: 's2', name: 'Bob Williams', email: 'bob@edu.com' },
];

const MOCK_RECRUITERS = [
     { id: 'r1', name: 'Charles Davis', email: 'charles@techsolutions.com' },
];


// --- CONTEXT for User and Navigation ---
interface AppContextType {
    userRole: UserRole;
    setUserRole: (role: UserRole) => void;
    screen: Screen;
    setScreen: (screen: Screen) => void;
    isLoading: boolean;
    setIsLoading: (loading: boolean) => void;
    apiKey: string;
    setApiKey: (key: string) => void;
}
const AppContext = createContext<AppContextType | null>(null);

const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const [userRole, setUserRole] = useState<UserRole>(null);
    const [screen, setScreen] = useState<Screen>('welcome');
    const [isLoading, setIsLoading] = useState(false);
    const [apiKey, setApiKeyInternal] = useState(() => localStorage.getItem('gemini-api-key') || '');

    const setApiKey = (key: string) => {
        setApiKeyInternal(key);
        localStorage.setItem('gemini-api-key', key);
    };

    return (
        <AppContext.Provider value={{ userRole, setUserRole, screen, setScreen, isLoading, setIsLoading, apiKey, setApiKey }}>
            {children}
        </AppContext.Provider>
    );
};

const useAppContext = () => {
    const context = useContext(AppContext);
    if (!context) {
        throw new Error('useAppContext must be used within an AppProvider');
    }
    return context;
};

// --- GEMINI API SERVICE ---
const GeminiService = {
    callGeminiAPI: async (prompt: string, apiKey: string, grounded: boolean = false) => {
        if (!apiKey) {
            return "Error: Gemini API Key is missing. Please add it in the sidebar.";
        }
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
        
        const payload: any = {
            contents: [{ parts: [{ text: prompt }] }],
        };

        if (grounded) {
             payload.tools = [{ "google_search": {} }];
        }

        // Exponential backoff
        let delay = 1000;
        for (let i = 0; i < 5; i++) {
            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (response.status === 401) {
                    return "Error: The provided Gemini API Key is invalid or unauthorized. Please check the key in the sidebar.";
                }

                if (!response.ok) {
                    throw new Error(`API call failed with status ${response.status}`);
                }
                
                const result = await response.json();
                return result.candidates?.[0]?.content?.parts?.[0]?.text || "No content returned.";

            } catch (error) {
                console.error("Gemini API call failed, retrying...", error);
                if (i === 4) {
                    return `Error: API call failed after multiple retries. ${error}`;
                }
                await new Promise(res => setTimeout(res, delay));
                delay *= 2;
            }
        }
        throw new Error("Gemini API call failed after multiple retries.");
    },

    analyzeResume: (resumeText: string, apiKey: string) => {
        const prompt = `Analyze the following resume and provide:
        1. A concise professional summary.
        2. A list of key skills identified.
        3. Suggestions for improvement, focusing on action verbs and quantifiable achievements.
        Format the response as clean HTML.
        
        Resume:
        ${resumeText}`;
        return GeminiService.callGeminiAPI(prompt, apiKey);
    },

    generateInterviewQuestions: (resumeText: string, apiKey: string) => {
        const prompt = `Based on this resume, generate 5 insightful interview questions to assess the candidate's experience and skills.
        
        Resume:
        ${resumeText}`;
        return GeminiService.callGeminiAPI(prompt, apiKey);
    },

    evaluateAnswer: (question: string, answer: string, apiKey: string) => {
        const prompt = `Evaluate the following interview answer using the STAR method (Situation, Task, Action, Result). Provide constructive feedback.
        Question: "${question}"
        Answer: "${answer}"`;
        return GeminiService.callGeminiAPI(prompt, apiKey);
    },

    generateJobDescription: (jobTitle: string, skills: string, apiKey: string) => {
        const prompt = `Generate a compelling and professional job description for a "${jobTitle}" position requiring the following skills: ${skills}. Include responsibilities, qualifications, and benefits sections. Format as clean HTML.`;
        return GeminiService.callGeminiAPI(prompt, apiKey, true);
    },
    
    suggestSkills: (currentSkills: string, apiKey: string) => {
        const prompt = `Based on the skills "${currentSkills}", suggest 5 related, in-demand skills a student should learn to improve their job prospects. List them without any extra formatting.`;
        return GeminiService.callGeminiAPI(prompt, apiKey, true);
    },

    validateJobPosting: (jobDescription: string, apiKey: string) => {
        const prompt = `Analyze this job posting for clarity, inclusivity, and any potential red flags. Provide a summary of findings and a "pass" or "fail" recommendation.
        
        Job Description:
        ${jobDescription}`;
        return GeminiService.callGeminiAPI(prompt, apiKey);
    }
};


// --- CUSTOM HOOKS ---
const useFileProcessor = () => {
    const { setIsLoading } = useAppContext();
    const [fileContent, setFileContent] = useState('');
    const [fileName, setFileName] = useState('');

    const processFile = (file: File) => {
        if (!file) return;

        setIsLoading(true);
        setFileName(file.name);
        const reader = new FileReader();

        if (file.type === 'application/pdf') {
            reader.onload = async (e) => {
                const pdfjsLib = (window as any).pdfjsLib;
                if (!pdfjsLib) {
                    console.error("PDF processing library is not loaded yet. Please try again in a moment.");
                    setIsLoading(false);
                    return;
                }
                const typedarray = new Uint8Array(e.target?.result as ArrayBuffer);
                const pdf = await pdfjsLib.getDocument(typedarray).promise;
                let text = '';
                for (let i = 1; i <= pdf.numPages; i++) {
                    const page = await pdf.getPage(i);
                    const textContent = await page.getTextContent();
                    text += textContent.items.map((item: any) => item.str).join(' ') + '\n';
                }
                setFileContent(text);
                setIsLoading(false);
            };
            reader.readAsArrayBuffer(file);
        } else { // Plain text
            reader.onload = (e) => {
                setFileContent(e.target?.result as string);
                setIsLoading(false);
            };
            reader.readAsText(file);
        }
    };
    
    return { processFile, fileContent, fileName };
};


// --- SHARED UI COMPONENTS ---

const LoadingSpinner = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
        <div className="animate-spin rounded-full h-32 w-32 border-t-4 border-b-4 border-blue-500"></div>
    </div>
);

const Modal: React.FC<{ title: string; children: React.ReactNode; onClose: () => void }> = ({ title, children, onClose }) => (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-40 p-4">
        <div className="bg-white/80 backdrop-blur-xl rounded-2xl shadow-2xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto border border-white/20">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-gray-800">{title}</h2>
                <button onClick={onClose} className="text-gray-600 hover:text-gray-900 text-3xl">&times;</button>
            </div>
            {children}
        </div>
    </div>
);

const Card: React.FC<{ children: React.ReactNode, className?: string }> = ({ children, className = '' }) => (
    <div className={`bg-white/50 backdrop-blur-lg border border-white/30 rounded-2xl shadow-lg p-6 ${className}`}>
        {children}
    </div>
);

const Button: React.FC<{ onClick?: () => void; children: React.ReactNode; className?: string, type?: "button" | "submit" | "reset", disabled?: boolean }> = ({ onClick, children, className = '', type="button", disabled = false }) => (
    <button type={type} onClick={onClick} disabled={disabled} className={`px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-bold rounded-lg shadow-md hover:scale-105 transform transition-transform duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75 disabled:bg-gray-400 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed ${className}`}>
        {children}
    </button>
);

const IconWrapper: React.FC<{ children: React.ReactNode, className?: string }> = ({ children, className }) => (
    <div className={`w-12 h-12 rounded-full flex items-center justify-center ${className}`}>
        {children}
    </div>
);

// --- MAIN SCREENS & COMPONENTS ---

const WelcomeScreen = () => {
    const { setUserRole, setScreen } = useAppContext();

    const handleSelectRole = (role: UserRole) => {
        setUserRole(role);
        if (role === 'student') setScreen('student_onboarding');
        else if (role === 'recruiter') setScreen('recruiter_dashboard');
        else if (role === 'admin') setScreen('admin_dashboard');
    };

    return (
        <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-gray-900 to-gray-700 text-white">
            <div className="text-center w-full max-w-4xl mx-auto">
                <h1 className="text-5xl md:text-7xl font-bold mb-4 animate-fade-in-down">Training & Placement Office Portal</h1>
                <p className="text-xl md:text-2xl text-gray-300 mb-12 animate-fade-in-up">Your Gateway to a Successful Career</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div onClick={() => handleSelectRole('student')} className="role-card">
                        <h2 className="text-3xl font-semibold mb-2">Student</h2>
                        <p>Find jobs, optimize your resume, and practice for interviews.</p>
                    </div>
                    <div onClick={() => handleSelectRole('recruiter')} className="role-card">
                        <h2 className="text-3xl font-semibold mb-2">Recruiter</h2>
                        <p>Discover top talent, post jobs, and manage candidates.</p>
                    </div>
                    <div onClick={() => handleSelectRole('admin')} className="role-card">
                        <h2 className="text-3xl font-semibold mb-2">Admin</h2>
                        <p>Oversee the portal, manage users, and view analytics.</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

// --- STUDENT JOURNEY ---
const StudentOnboarding = () => {
    const { setScreen, setIsLoading, apiKey } = useAppContext();
    const [step, setStep] = useState(1);
    const [skills, setSkills] = useState('');
    const [suggestedSkills, setSuggestedSkills] = useState<string[]>([]);
    
    const handleSkillsSubmit = async () => {
        setIsLoading(true);
        const suggestions = await GeminiService.suggestSkills(skills, apiKey);
        if(suggestions.startsWith("Error:")) {
            alert(suggestions); // Using alert here for simplicity as it's a critical feedback loop
        } else {
            setSuggestedSkills(suggestions.split(',').map(s => s.trim()));
            setStep(3);
        }
        setIsLoading(false);
    };

    return (
        <div className="p-8">
            <h1 className="text-3xl font-bold mb-6">Student Onboarding</h1>
            {step === 1 && (
                <Card>
                    <h2 className="text-2xl mb-4">Step 1: Personal Information</h2>
                    <form className="space-y-4">
                        <input type="text" placeholder="Full Name" className="w-full p-3 rounded-lg border" />
                        <input type="email" placeholder="Email" className="w-full p-3 rounded-lg border" />
                        <Button onClick={() => setStep(2)}>Next</Button>
                    </form>
                </Card>
            )}
            {step === 2 && (
                <Card>
                    <h2 className="text-2xl mb-4">Step 2: Your Skills</h2>
                    <p className="mb-4 text-gray-600">Enter your current skills, separated by commas. Our AI will suggest more to learn!</p>
                    <textarea value={skills} onChange={(e) => setSkills(e.target.value)} placeholder="e.g., React, Node.js, Python, SQL" className="w-full p-3 rounded-lg border h-32"></textarea>
                    <div className="flex gap-4 mt-4">
                        <Button onClick={() => setStep(1)} className="bg-gray-400 hover:bg-gray-500 from-gray-500 to-gray-600">Back</Button>
                        <Button onClick={handleSkillsSubmit}>Get AI Suggestions</Button>
                    </div>
                </Card>
            )}
            {step === 3 && (
                <Card>
                    <h2 className="text-2xl mb-4">Step 3: AI Skill Suggestions</h2>
                    <p className="mb-4 text-gray-600">Here are some skills you might want to learn next:</p>
                    <div className="flex flex-wrap gap-3 mb-6">
                        {suggestedSkills.map((skill, i) => (
                           <span key={i} className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full">{skill}</span>
                        ))}
                    </div>
                     <div className="flex gap-4 mt-4">
                        <Button onClick={() => setStep(2)} className="bg-gray-400 hover:bg-gray-500 from-gray-500 to-gray-600">Back</Button>
                        <Button onClick={() => setScreen('student_dashboard')}>Finish Onboarding</Button>
                    </div>
                </Card>
            )}
        </div>
    );
};

const StudentDashboard = () => {
    // A more complex implementation would use a physics library or D3.js
    const skills = ['React', 'TypeScript', 'Node.js', 'Figma', 'SQL', 'GraphQL', 'Docker'];
    
    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">My Dashboard</h1>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <Card className="lg:col-span-2">
                    <h2 className="text-2xl font-bold mb-4">Skill Galaxy</h2>
                    <p className="text-gray-600 mb-4">Your skills visualized. The bigger the star, the stronger the skill.</p>
                    <div className="h-64 bg-gray-800 rounded-xl flex items-center justify-center text-white relative overflow-hidden">
                        {/* Simplified skill galaxy visualization */}
                        {skills.map((skill, i) => (
                            <div key={skill} className="absolute animate-pulse" style={{
                                top: `${20 + Math.sin(i * 0.9) * 30 + 30}%`,
                                left: `${20 + Math.cos(i * 0.9) * 30 + 30}%`,
                                transform: `scale(${1 + Math.random() * 0.5})`,
                            }}>
                                <div className="w-3 h-3 bg-white rounded-full shadow-[0_0_10px_#fff,0_0_20px_#fff]"></div>
                                <span className="absolute top-4 left-1/2 -translate-x-1/2 text-sm">{skill}</span>
                            </div>
                        ))}
                        <p className="z-10 text-lg font-semibold">Your Career Constellation</p>
                    </div>
                </Card>
                <Card>
                    <h2 className="text-2xl font-bold mb-4">Quick Stats</h2>
                    <div className="space-y-4">
                        <div className="flex items-center justify-between">
                            <span className="font-semibold">Applications Sent</span>
                            <span className="text-2xl font-bold text-blue-600">12</span>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="font-semibold">Interviews Scheduled</span>
                            <span className="text-2xl font-bold text-green-600">3</span>
                        </div>
                        <div className="flex items-center justify-between">
                            <span className="font-semibold">Profile Views</span>
                            <span className="text-2xl font-bold text-purple-600">45</span>
                        </div>
                    </div>
                </Card>
            </div>
        </div>
    );
};

const ResumeOptimizer = () => {
    const { processFile, fileContent, fileName } = useFileProcessor();
    const { setIsLoading, apiKey } = useAppContext();
    const [analysis, setAnalysis] = useState('');
    const fileInputRef = useRef<HTMLInputElement>(null);
    
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            processFile(e.target.files[0]);
        }
    };
    
    const handleAnalyze = async () => {
        if (!fileContent) return;
        setIsLoading(true);
        const result = await GeminiService.analyzeResume(fileContent, apiKey);
        setAnalysis(result);
        setIsLoading(false);
    };

    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">AI Resume Optimizer</h1>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card>
                    <h2 className="text-2xl font-bold mb-4">Upload Your Resume</h2>
                    <p className="text-gray-600 mb-4">Upload a .pdf or .txt file. Our AI will give you feedback.</p>
                    <input type="file" ref={fileInputRef} onChange={handleFileChange} accept=".pdf,.txt" className="hidden" />
                    <Button onClick={() => fileInputRef.current?.click()} className="w-full justify-center flex items-center gap-2">
                        {/* SVG for upload icon */}
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" /></svg>
                        Choose File
                    </Button>
                    {fileName && <p className="mt-4 text-center text-gray-700">Selected: {fileName}</p>}
                    <Button onClick={handleAnalyze} disabled={!fileContent} className="w-full mt-4">Analyze with AI</Button>
                </Card>
                <Card>
                    <h2 className="text-2xl font-bold mb-4">AI Analysis & Feedback</h2>
                    {analysis ? (
                         analysis.startsWith("Error:") ? <p className="text-red-500">{analysis}</p> : <div className="prose" dangerouslySetInnerHTML={{ __html: analysis }} />
                    ) : (
                        <p className="text-gray-500">Analysis will appear here...</p>
                    )}
                </Card>
            </div>
        </div>
    );
};

const MockInterview = () => {
    const { setIsLoading, apiKey } = useAppContext();
    const [questions, setQuestions] = useState<string[]>([]);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [answer, setAnswer] = useState('');
    const [feedback, setFeedback] = useState('');
    const [isRecording, setIsRecording] = useState(false);
    const { fileContent, processFile } = useFileProcessor();

    const handleGenerateQuestions = async (resumeText: string) => {
        setIsLoading(true);
        const q = await GeminiService.generateInterviewQuestions(resumeText, apiKey);
        if(!q.startsWith("Error:")) {
            setQuestions(q.split('\n').filter(Boolean));
        } else {
            setQuestions([q]);
        }
        setIsLoading(false);
    };

    const handleAnswerSubmit = async () => {
        setIsLoading(true);
        const fb = await GeminiService.evaluateAnswer(questions[currentQuestionIndex], answer, apiKey);
        setFeedback(fb);
        setIsLoading(false);
    };
    
    // Placeholder for Speech-to-Text
    useEffect(() => {
        let recognition: any;
        if ('webkitSpeechRecognition' in window && isRecording) {
            recognition = new (window as any).webkitSpeechRecognition();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.onresult = (event: any) => {
                let interimTranscript = '';
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                         setAnswer(prev => prev + event.results[i][0].transcript);
                    } else {
                        interimTranscript += event.results[i][0].transcript;
                    }
                }
            };
            recognition.start();
        }
        return () => recognition?.stop();
    }, [isRecording]);

    if (!fileContent) {
        return (
            <Card>
                <h2 className="text-2xl mb-4">Upload Resume to Start</h2>
                <input type="file" onChange={(e) => e.target.files && processFile(e.target.files[0])} />
            </Card>
        );
    }
    
    if (questions.length === 0) {
        return <Button onClick={() => handleGenerateQuestions(fileContent)}>Generate Questions from Resume</Button>
    }

    return (
        <div className="space-y-6">
             <Card>
                <h2 className="text-xl font-semibold mb-2">Question {currentQuestionIndex + 1}/{questions.length}</h2>
                <p className={`text-lg ${questions[0].startsWith("Error:") ? 'text-red-500' : 'text-gray-800'}`}>{questions[currentQuestionIndex]}</p>
            </Card>
            <Card>
                 <h2 className="text-xl font-semibold mb-2">Your Answer</h2>
                 <textarea value={answer} onChange={(e) => setAnswer(e.target.value)} className="w-full p-3 h-40 border rounded-lg" placeholder="Type or record your answer..." />
                 <div className="flex items-center gap-4 mt-2">
                     <Button onClick={() => setIsRecording(p => !p)} className={isRecording ? 'bg-red-500 from-red-500 to-red-600' : ''}>
                         {isRecording ? 'Stop Recording' : 'Record Answer'}
                     </Button>
                     <Button onClick={handleAnswerSubmit}>Get Feedback</Button>
                 </div>
            </Card>
             {feedback && (
                <Card>
                    <h2 className="text-xl font-semibold mb-2">AI Feedback</h2>
                    <p className={feedback.startsWith("Error:") ? 'text-red-500' : ''}>{feedback}</p>
                </Card>
            )}
            <div className="flex justify-between">
                <Button onClick={() => setCurrentQuestionIndex(p => Math.max(0, p - 1))} disabled={currentQuestionIndex === 0}>Previous</Button>
                <Button onClick={() => { setAnswer(''); setFeedback(''); setCurrentQuestionIndex(p => Math.min(questions.length - 1, p + 1)); }} disabled={currentQuestionIndex === questions.length - 1}>Next</Button>
            </div>
        </div>
    );
};

const JobListings = () => {
    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">Job Listings</h1>
            <div className="space-y-4">
                {MOCK_JOBS.filter(j => j.status === 'approved').map(job => (
                    <Card key={job.id} className="flex items-center justify-between hover:shadow-xl transition-shadow">
                        <div>
                            <h2 className="text-xl font-bold">{job.title}</h2>
                            <p className="text-gray-600">{job.company}</p>
                        </div>
                        <div className="text-center">
                            <p className="text-green-600 font-bold text-2xl">{job.matchPercentage}%</p>
                            <p className="text-sm text-gray-500">AI Match</p>
                        </div>
                        <Button>View & Apply</Button>
                    </Card>
                ))}
            </div>
        </div>
    );
};

// --- RECRUITER JOURNEY ---
const RecruiterDashboard = () => (
     <div>
        <h1 className="text-3xl font-bold mb-6">Recruiter Dashboard</h1>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="text-center">
                <h2 className="text-xl font-semibold">Active Listings</h2>
                <p className="text-4xl font-bold text-blue-600">8</p>
            </Card>
            <Card className="text-center">
                <h2 className="text-xl font-semibold">New Applicants</h2>
                <p className="text-4xl font-bold text-green-600">24</p>
            </Card>
            <Card className="text-center">
                <h2 className="text-xl font-semibold">Messages</h2>
                <p className="text-4xl font-bold text-purple-600">5</p>
            </Card>
        </div>
    </div>
);

const CreateJobPosting = () => {
    const { setIsLoading, apiKey } = useAppContext();
    const [jobTitle, setJobTitle] = useState('');
    const [skills, setSkills] = useState('');
    const [description, setDescription] = useState('');
    
    const handleGenerate = async () => {
        setIsLoading(true);
        const desc = await GeminiService.generateJobDescription(jobTitle, skills, apiKey);
        setDescription(desc);
        setIsLoading(false);
    };

    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">Create Job Posting</h1>
            <Card className="space-y-4">
                <input type="text" placeholder="Job Title" value={jobTitle} onChange={e => setJobTitle(e.target.value)} className="w-full p-3 rounded-lg border"/>
                <input type="text" placeholder="Required Skills (comma-separated)" value={skills} onChange={e => setSkills(e.target.value)} className="w-full p-3 rounded-lg border"/>
                <Button onClick={handleGenerate}>Generate Description with AI</Button>
                {description.startsWith("Error:") 
                    ? <p className="text-red-500 p-4 border rounded-lg bg-red-50">{description}</p>
                    : <div className="prose mt-4 p-4 border rounded-lg bg-gray-50 min-h-[200px]" dangerouslySetInnerHTML={{ __html: description }} />
                }
                <Button className="w-full">Submit for Approval</Button>
            </Card>
        </div>
    );
};

// --- ADMIN JOURNEY ---

const AdminDashboard = () => {
    const chartRef = useRef<HTMLCanvasElement>(null);

    useEffect(() => {
        if (chartRef.current) {
            const chartInstance = new Chart(chartRef.current, {
                type: 'bar',
                data: {
                    labels: ['Students', 'Recruiters', 'Jobs Posted', 'Placements'],
                    datasets: [{
                        label: 'Portal Activity',
                        data: [1200, 150, 45, 22],
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.6)',
                            'rgba(255, 206, 86, 0.6)',
                            'rgba(75, 192, 192, 0.6)',
                            'rgba(153, 102, 255, 0.6)'
                        ],
                    }]
                },
                options: { responsive: true, maintainAspectRatio: false }
            });

            return () => chartInstance.destroy(); // Cleanup chart on component unmount
        }
    }, []);

    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                    <h2 className="text-xl font-bold mb-4">Portal Analytics</h2>
                    <div className="h-80 relative">
                        <canvas ref={chartRef}></canvas>
                    </div>
                </Card>
                <Card>
                    <h2 className="text-xl font-bold mb-4">Pending Approvals</h2>
                    <p className="text-4xl font-bold text-orange-500">
                        {MOCK_JOBS.filter(j => j.status === 'pending').length} Jobs
                    </p>
                </Card>
            </div>
        </div>
    );
};


const JobApproval = () => {
    const { setIsLoading, apiKey } = useAppContext();
    const [pendingJobs, setPendingJobs] = useState(MOCK_JOBS.filter(j => j.status === 'pending'));
    const [selectedJob, setSelectedJob] = useState<Job | null>(null);
    const [validationResult, setValidationResult] = useState('');

    const handleValidate = async (job: Job) => {
        setSelectedJob(job);
        setIsLoading(true);
        const result = await GeminiService.validateJobPosting(job.description, apiKey);
        setValidationResult(result);
        setIsLoading(false);
    };

    const handleDecision = (jobId: string, decision: 'approved' | 'rejected') => {
        setPendingJobs(prev => prev.filter(j => j.id !== jobId));
        // In real app, update backend state
        setSelectedJob(null);
        setValidationResult('');
    };

    return (
        <div>
            <h1 className="text-3xl font-bold mb-6">Job Posting Approval</h1>
            <div className="space-y-4">
                {pendingJobs.map(job => (
                    <Card key={job.id}>
                        <h2 className="text-xl font-bold">{job.title} - {job.company}</h2>
                        <p className="text-gray-600 mt-2">{job.description}</p>
                        <div className="flex gap-4 mt-4">
                            <Button onClick={() => handleValidate(job)}>Validate with AI</Button>
                            <Button onClick={() => handleDecision(job.id, 'approved')} className="bg-green-500 from-green-500 to-green-600">Approve</Button>
                            <Button onClick={() => handleDecision(job.id, 'rejected')} className="bg-red-500 from-red-500 to-red-600">Reject</Button>
                        </div>
                    </Card>
                ))}
            </div>
            {selectedJob && (
                <Modal title={`AI Validation for ${selectedJob.title}`} onClose={() => setSelectedJob(null)}>
                     {validationResult.startsWith("Error:")
                        ? <p className="text-red-500">{validationResult}</p>
                        : <p>{validationResult || "Loading validation..."}</p>
                     }
                </Modal>
            )}
        </div>
    );
};


// A placeholder for other screens to keep the file size manageable
const PlaceholderScreen: React.FC<{ title: string }> = ({ title }) => (
    <Card>
        <h1 className="text-3xl font-bold">{title}</h1>
        <p className="mt-4 text-gray-600">This feature is under construction.</p>
    </Card>
);

const UserManagement = () => (
    <div>
        <h1 className="text-3xl font-bold mb-6">User Management</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
                <h2 className="text-2xl font-bold mb-4">Students</h2>
                <ul>{MOCK_STUDENTS.map(s => <li key={s.id} className="py-2 border-b">{s.name} - {s.email}</li>)}</ul>
            </Card>
            <Card>
                <h2 className="text-2xl font-bold mb-4">Recruiters</h2>
                 <ul>{MOCK_RECRUITERS.map(r => <li key={r.id} className="py-2 border-b">{r.name} - {r.email}</li>)}</ul>
            </Card>
        </div>
    </div>
);


// --- App Layout and Router ---
const AppLayout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
    const { userRole, setScreen, setUserRole, apiKey, setApiKey } = useAppContext();
    
    const SIDENAV_LINKS = {
        student: [
            { screen: 'student_dashboard', label: 'Dashboard' },
            { screen: 'resume_optimizer', label: 'Resume Optimizer' },
            { screen: 'mock_interview', label: 'Mock Interview' },
            { screen: 'job_listings', label: 'Job Listings' },
            { screen: 'application_tracker', label: 'My Applications' },
        ],
        recruiter: [
            { screen: 'recruiter_dashboard', label: 'Dashboard' },
            { screen: 'create_job', label: 'Post a Job' },
            { screen: 'manage_jobs', label: 'Manage Jobs' },
            { screen: 'candidate_review', label: 'Review Candidates' },
        ],
        admin: [
            { screen: 'admin_dashboard', label: 'Dashboard' },
            { screen: 'job_approval', label: 'Job Approvals' },
            { screen: 'user_management', label: 'User Management' },
            { screen: 'content_management', label: 'Manage Content' },
        ],
    };

    const handleLogout = () => {
        setUserRole(null);
        setScreen('welcome');
    };

    if (userRole === null) {
        return <>{children}</>;
    }

    const links = SIDENAV_LINKS[userRole] || [];

    return (
        <div className="flex h-screen bg-gray-100">
            <aside className="w-64 bg-gray-800 text-white flex flex-col p-4">
                <h1 className="text-2xl font-bold mb-8">TPO Portal</h1>
                <nav className="flex-grow">
                    <ul>
                        {links.map(link => (
                            <li key={link.screen}>
                                <a href="#" onClick={(e) => { e.preventDefault(); setScreen(link.screen as Screen); }} className="block py-3 px-4 rounded hover:bg-gray-700 transition-colors">
                                    {link.label}
                                </a>
                            </li>
                        ))}
                    </ul>
                </nav>
                <div className="mt-auto pt-4 border-t border-gray-700">
                     <label htmlFor="api-key" className="text-xs text-gray-400 mb-1 block">Gemini API Key</label>
                     <input
                        id="api-key"
                        type="password"
                        value={apiKey}
                        onChange={(e) => setApiKey(e.target.value)}
                        placeholder="Enter your API key"
                        className="w-full p-2 bg-gray-700 border border-gray-600 rounded text-white text-sm"
                     />
                </div>
                <Button onClick={handleLogout} className="bg-red-500 from-red-500 to-red-600 mt-4">Logout</Button>
            </aside>
            <main className="flex-1 p-8 overflow-y-auto">
                {children}
            </main>
        </div>
    );
};


const ScreenRouter = () => {
    const { screen } = useAppContext();

    switch(screen) {
        case 'welcome': return <WelcomeScreen />;
        // Student
        case 'student_onboarding': return <StudentOnboarding />;
        case 'student_dashboard': return <StudentDashboard />;
        case 'resume_optimizer': return <ResumeOptimizer />;
        case 'mock_interview': return <MockInterview />;
        case 'job_listings': return <JobListings />;
        case 'application_tracker': return <PlaceholderScreen title="Application Tracker" />;
        case 'job_fair': return <PlaceholderScreen title="Virtual Job Fair" />;
        case 'training_hub': return <PlaceholderScreen title="Training Hub" />;
        case 'student_profile': return <PlaceholderScreen title="My Profile" />;
        // Recruiter
        case 'recruiter_dashboard': return <RecruiterDashboard />;
        case 'create_job': return <CreateJobPosting />;
        case 'candidate_review': return <PlaceholderScreen title="Candidate Review" />;
        case 'messaging': return <PlaceholderScreen title="Messaging" />;
        case 'manage_jobs': return <PlaceholderScreen title="Manage Jobs" />;
        case 'company_profile': return <PlaceholderScreen title="Company Profile" />;
        // Admin
        case 'admin_dashboard': return <AdminDashboard />;
        case 'job_approval': return <JobApproval />;
        case 'user_management': return <UserManagement />;
        case 'content_management': return <PlaceholderScreen title="Content Management" />;
        default: return <WelcomeScreen />;
    }
};

// --- MAIN APP COMPONENT ---
export default function App() {
    useEffect(() => {
        const scriptId = 'pdfjs-script';
        if (document.getElementById(scriptId)) {
            return;
        }
        const script = document.createElement('script');
        script.id = scriptId;
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.4.168/pdf.min.mjs';
        script.type = 'module';
        script.async = true;

        script.onload = () => {
            const pdfjsLib = (window as any).pdfjsLib;
            if (pdfjsLib) {
                pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/4.4.168/pdf.worker.mjs`;
            }
        };

        document.body.appendChild(script);

        return () => {
            const scriptElement = document.getElementById(scriptId);
            if (scriptElement) {
                document.body.removeChild(scriptElement);
            }
        };
    }, []);

    return (
        <>
            <style>{`
                .role-card {
                    background: rgba(255, 255, 255, 0.1);
                    border-radius: 1rem;
                    padding: 2rem;
                    transition: transform 0.3s ease, background 0.3s ease;
                    cursor: pointer;
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    backdrop-filter: blur(10px);
                }
                .role-card:hover {
                    transform: translateY(-10px) scale(1.03);
                    background: rgba(255, 255, 255, 0.2);
                }
                @keyframes fade-in-down { 0% { opacity: 0; transform: translateY(-20px); } 100% { opacity: 1; transform: translateY(0); } }
                @keyframes fade-in-up { 0% { opacity: 0; transform: translateY(20px); } 100% { opacity: 1; transform: translateY(0); } }
                .animate-fade-in-down { animation: fade-in-down 0.8s ease-out forwards; }
                .animate-fade-in-up { animation: fade-in-up 0.8s ease-out 0.3s forwards; }
                .prose { max-width: none; }
            `}</style>
            <AppProvider>
                <div className="font-sans">
                    <AppWrapper />
                </div>
            </AppProvider>
        </>
    );
}

const AppWrapper = () => {
    const { isLoading } = useAppContext();
    return (
        <>
            {isLoading && <LoadingSpinner />}
            <AppLayout>
                <ScreenRouter />
            </AppLayout>
        </>
    );
};

